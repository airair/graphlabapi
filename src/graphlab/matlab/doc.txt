The MATLAB update function must obey the following form:

function update_function(currentvertex,  % scalar integer
                         inedges,        % array of in edge ids
                         inv,            % array of sources vertices for each in edge id
                         outedges,       % array of out edge ids
                         outv,           % array of target vertices for each in edge id
                         handle)         % scalar integer                    
end





In addition: the following link functions are provided:

function vdata = get_vertex_data(handle, vertex)  % returns data on vertex 
function edata = get_edge_data(handle, edge)  % returns data on edge 
function add_task(handle, vertex, 'function name', priority)  
function set_vertex_data(handle, vertex, vdata)  % sets data on vertex
function set_edge_data(handle, edge, edata)  % sets data on edge


Start by calling 

[newvertexdata, adj, newedgedata] = graphlab_mex(vertexdata, adj_mat, edgedata, schedule)
  vertexdata: cell array of vertex data
  adj_mat: sparse adjacency matrix where adj_mat[i][j] is an edge from vertex i to vertex j
           and the data on the edge is edgedata(adjmat[i][j])
  edgedata: cell array of edge data
  schedule: array of task structs where each
    task struct:
      vertex: numeric vertex id
      update function: string. Name of the update function
    
    
  Returns the new vertex data and the new edge data
  
  

The generation process works as such:
==--- Initial Matlab Generation ---===
1: user calls make_graphlab_mex([update function list], example vertex data, example edge data)

2: make_graphlab_mex type checks the example data to ensure that the data types
   are all supported, and to convert all the dynamic arrays. The EMX structure definitions are generated here.

3: matlab link functions get_vertex_data.m, get_edge_data.m, set_edge_data.m, set_vertex_data.m are generated.
   An additional empty function "datatype_identifier(vdata,edata)" is also created.

3: EMLC is called to translate the update functions to C.

4: A python parser reads the C output and generates translators to go in between mxArray <--> emlc structures. (output to mx_emx_converters.hpp)
     (mxarray_to_emlc.py, scalar_converters.hpp, struct_arrays.hpp, mexutil.hpp, mex_classid_traits.hpp)
==--- C++ templates ---===
5: gl_emx_graphtypes.hpp uses boost::function on the "datatype_identifier" to figure out the type of
   of vertex data and type of edge data. It also typedefs the graph data type.

6: update_function_generator.hpp uses Boost preprocessor to create wrappers around each update function
   and register their names in a global table. [incomplete]
==--- Matlab->C++ entry point ---===
7: graphlab_mex.cpp is the main entry point.

8: graphlab_mex_parse.cpp type checks and processes the parameters and constructs the graph

9: link functions [incomplete]